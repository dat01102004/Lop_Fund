import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../env.dart';
import 'session.dart';

final dioProvider = Provider<Dio>((ref) {
  final dio = Dio(
    BaseOptions(
      baseUrl: Env.apiBase, // ƒë·∫£m b·∫£o ƒë√∫ng baseUrl
      connectTimeout: const Duration(seconds: 15),
      receiveTimeout: const Duration(seconds: 30),
      headers: {'Accept': 'application/json'},
      validateStatus: (code) => code != null && code < 400, // 4xx -> DioException
    ),
  );

  dio.interceptors.add(
    InterceptorsWrapper(
      onRequest: (options, handler) {
        // üëâ lu√¥n ƒë·ªçc token m·ªõi nh·∫•t t·∫°i th·ªùi ƒëi·ªÉm request
        final token = ref.read(sessionProvider).token;
        if (token != null && token.isNotEmpty) {
          options.headers['Authorization'] = 'Bearer $token';
        } else {
          options.headers.remove('Authorization');
        }
        handler.next(options);
      },
      onError: (e, handler) async {
        // Tu·ª≥ ch·ªçn: n·∫øu 401 t·ª´ server -> xo√° session ƒë·ªÉ y√™u c·∫ßu login l·∫°i
        if (e.response?.statusCode == 401) {
          // tr√°nh v√≤ng l·∫∑p n·∫øu l·ªói t·ª´ /login ho·∫∑c /register
          final path = e.requestOptions.path;
          if (!path.endsWith('/login') && !path.endsWith('/register')) {
            try {
              await ref.read(sessionProvider.notifier).logout();
            } catch (_) {}
          }
        }
        handler.next(e);
      },
    ),
  );

  // (Tu·ª≥ ch·ªçn) LogInterceptor ph·ª•c v·ª• debug
  // dio.interceptors.add(LogInterceptor(requestBody: true, responseBody: true));

  return dio;
});
